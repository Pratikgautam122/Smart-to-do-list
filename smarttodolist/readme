# Smart To-Do List App

A modern, feature-rich task management application built with React and Firebase, offering a seamless user experience for organizing your daily tasks.

## üöÄ Features

### Core Functionality
- ‚úÖ **Task Management**: Create, edit, delete, and complete tasks
- üì± **Responsive Design**: Works perfectly on desktop, tablet, and mobile
- üîê **Authentication**: Secure login with Email/Password and Google OAuth
- ‚òÅÔ∏è **Cloud Storage**: Real-time sync across devices using Firebase Firestore
- üîî **Smart Reminders**: Browser notifications for due tasks
- üé® **Modern UI**: Clean, intuitive interface with smooth animations

### Advanced Features
- üìä **Priority Levels**: High, Medium, Low priority classification
- üìÇ **Categories**: Organize tasks by Work, Personal, School, Health, Shopping
- üéØ **Smart Filtering**: Filter by status, priority, category, and due date
- üìÖ **Due Date Tracking**: Set and track task deadlines
- üìà **Progress Tracking**: Visual progress indicators and completion stats
- üåì **Real-time Updates**: Instant synchronization across devices

## üõ†Ô∏è Technology Stack

- **Frontend**: React 18 with Hooks
- **Backend**: Firebase (Authentication, Firestore)
- **Styling**: Tailwind CSS
- **Icons**: Lucide React
- **Notifications**: Web Notification API
- **Build Tool**: Create React App

## üìÅ Project Structure

```
smart-todo-app/
‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îú‚îÄ‚îÄ index.html
‚îÇ   ‚îî‚îÄ‚îÄ manifest.json
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.js                 # Main app component
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Auth.js               # Authentication component
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AuthContext.js        # Authentication context provider
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Dashboard.js          # Main dashboard container
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Header.js             # App header with user info
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Sidebar.js            # Navigation sidebar
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ TaskList.js           # Task list container
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ TaskItem.js           # Individual task component
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ TaskModal.js          # Add/edit task modal
‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ firebaseConfig.js     # Firebase configuration
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ taskService.js        # Task CRUD operations
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ notificationService.js # Notification handling
‚îÇ   ‚îú‚îÄ‚îÄ styles/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.css            # Global styles and Tailwind imports
‚îÇ   ‚îî‚îÄ‚îÄ index.js                 # App entry point
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ README.md
```

## üöÄ Getting Started

### Prerequisites
- Node.js (v14 or higher)
- npm or yarn
- Firebase project

### Installation

1. **Clone the repository**
   ```bash
   git clone https://github.com/yourusername/smart-todo-app.git
   cd smart-todo-app
   ```

2. **Install dependencies**
   ```bash
   npm install
   ```

3. **Set up Firebase**
   - Create a new Firebase project at [Firebase Console](https://console.firebase.google.com)
   - Enable Authentication (Email/Password and Google providers)
   - Create a Firestore database
   - Update `src/firebaseConfig.js` with your Firebase configuration

4. **Configure Firestore Security Rules**
   ```javascript
   rules_version = '2';
   service cloud.firestore {
     match /databases/{database}/documents {
       match /tasks/{taskId} {
         allow read, write: if request.auth != null && 
           request.auth.uid == resource.data.userId;
         allow create: if request.auth != null && 
           request.auth.uid == request.resource.data.userId;
       }
     }
   }
   ```

5. **Start the development server**
   ```bash
   npm start
   ```

6. **Open your browser**
   Navigate to `http://localhost:3000`

## üîß Configuration

### Firebase Setup
1. Go to Firebase Console and create a new project
2. Enable Authentication:
   - Go to Authentication > Sign-in method
   - Enable Email/Password and Google providers
3. Create Firestore Database:
   - Go to Firestore Database
   - Create database in test mode (update security rules later)
4. Get your config:
   - Go to Project Settings > General
   - Scroll to "Your apps" section
   - Copy the Firebase configuration

### Environment Variables (Optional)
Create a `.env` file in the root directory:
```env
REACT_APP_FIREBASE_API_KEY=your_api_key
REACT_APP_FIREBASE_AUTH_DOMAIN=your_auth_domain
REACT_APP_FIREBASE_PROJECT_ID=your_project_id
REACT_APP_FIREBASE_STORAGE_BUCKET=your_storage_bucket
REACT_APP_FIREBASE_MESSAGING_SENDER_ID=your_sender_id
REACT_APP_FIREBASE_APP_ID=your_app_id
```

## üì± Features Guide

### Task Management
- **Create Tasks**: Click the "Add Task" button to create new tasks
- **Edit Tasks**: Click the edit icon on any task to modify it
- **Complete Tasks**: Click the checkbox to mark tasks as complete
- **Delete Tasks**: Click the trash icon to delete tasks (with confirmation)

### Organization
- **Categories**: Organize tasks into Work, Personal, School, Health, Shopping
- **Priorities**: Set tasks as High, Medium, or Low priority
- **Due Dates**: Set deadlines for important tasks
- **Filters**: View all tasks, pending, completed, high priority, or due today

### Notifications
- Enable browser notifications for task reminders
- Get notified 1 hour before due time and when tasks are due
- Notifications work even when the app is not actively open

## üé® Customization

### Styling
The app uses Tailwind CSS for styling. You can customize:
- Colors in `tailwind.config.js`
- Component styles in individual component files
- Global styles in `src/index.css`

### Adding New Categories
Update the `CATEGORIES` array in relevant components:
```javascript
const CATEGORIES = ["Work", "Personal", "School", "Health", "Shopping", "YourNewCategory"];
```

## üì¶ Building for Production

```bash
npm run build
```

This creates an optimized build in the `build` folder ready for deployment.

## üöÄ Deployment

### Firebase Hosting
```bash
npm install -g firebase-tools
firebase login
firebase init hosting
firebase deploy
```

### Other Platforms
- **Netlify**: Connect your GitHub repo and deploy automatically
- **Vercel**: Import your project and deploy with zero configuration
- **GitHub Pages**: Use `npm run build` and deploy the build folder

## üîê Security

- **Authentication**: Secure user authentication with Firebase
- **Data Protection**: User-specific data access with Firestore security rules
- **Input Validation**: Client-side and server-side validation
- **HTTPS**: Secure data transmission

## ü§ù Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request


## üôè Acknowledgments

- React team for the amazing framework
- Firebase for the backend services
- Tailwind CSS for the utility-first CSS framework
- Lucide React for the beautiful icons

## üìû Support

If you encounter any issues or have questions:
- Create an issue on GitHub
- Check the [documentation](https://github.com/yourusername/smart-todo-app/wiki)
- Contact the maintainers

---

Made with ‚ù§Ô∏è by Pratik Gautam
